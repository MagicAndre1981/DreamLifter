#pragma once

#ifndef _MIN_UMDF_LOADER_INTERFACE_H_
#define _MIN_UMDF_LOADER_INTERFACE_H_

#define DECLARE_HANDLE(name) struct name##__{int unused;}; typedef struct name##__ *name

DECLARE_HANDLE(WDFDRIVER);

typedef ULONG WDF_MAJOR_VERSION;
typedef ULONG WDF_MINOR_VERSION;
typedef ULONG WDF_BUILD_NUMBER;

typedef struct _WDF_VERSION {
    WDF_MAJOR_VERSION  Major;
    WDF_MINOR_VERSION  Minor;
    WDF_BUILD_NUMBER   Build;
} WDF_VERSION;

typedef struct _WDF_BIND_INFO {
    ULONG              Size;
    PWCHAR             Component;
    WDF_VERSION        Version;
    ULONG              FuncCount;
    PVOID              *FuncTable;
    PVOID              Module;
} WDF_BIND_INFO, * PWDF_BIND_INFO;

typedef struct _WDF_CLASS_EXTENSION {
    size_t Size;
    char* ExtensionName;
    ULONG MajorVersion;
    ULONG MinorVersion;
    ULONG Pad0;
    PVOID FuncTable;
    ULONG FuncCount;
    void* GlobalsPtr;
    void* CustomizedEntryPoint;
    INT64 Pad1;
} WDF_CLASS_EXTENSION, * PWDF_CLASS_EXTENSION;

#define WDF_DRIVER_GLOBALS_NAME_LEN (32)

typedef struct _WDF_DRIVER_GLOBALS {
    // backpointer to the handle for this driver
    WDFDRIVER Driver;
    // Flags indicated by the driver during create
    ULONG DriverFlags;
    // Tag generated by WDF for the driver.  Tag used by allocations made on
    // behalf of the driver by WDF.
    ULONG DriverTag;
    CHAR DriverName[WDF_DRIVER_GLOBALS_NAME_LEN];
    // If TRUE, the stub code will capture DriverObject->DriverUnload and insert
    // itself first in the unload chain.  If FALSE, DriverUnload is left alone
    // (but WDF will not be notified of unload and there will be no auto cleanup).
    BOOLEAN DisplaceDriverUnload;
} WDF_DRIVER_GLOBALS, * PWDF_DRIVER_GLOBALS;

typedef
NTSTATUS
(*PFN_LOADER_BIND_VERSION_LIB)(
    _In_ PVOID Context,
    _In_ PWDF_BIND_INFO BindInfo,
    _In_ PWDF_DRIVER_GLOBALS *DriverGlobals
    );

typedef
NTSTATUS
(*PFN_LOADER_BIND_EXTENSION_CLASS)(
    _In_ PVOID Context,
    _In_ PWDF_BIND_INFO BindInfo,
    _In_ PWDF_DRIVER_GLOBALS DriverGlobals,
    _In_ PWDF_CLASS_EXTENSION ClassExtensionInfo
    );

typedef struct _WDF_LOADER_INTERFACE {
    size_t LoaderInterfaceSize;
    PFN_LOADER_BIND_VERSION_LIB BindVersionLibrary;
    ULONG Unused0;
    PFN_LOADER_BIND_EXTENSION_CLASS BindExtensionClass;
    ULONG Unused1;
    PVOID WdfRegisterClassLibrary;
    ULONG LoaderFlags;
    ULONG Unused2;
} WDF_LOADER_INTERFACE, * PWDF_LOADER_INTERFACE;

// NTSTATUS __fastcall FxDriverEntryUm(PVOID LoaderInterface, PVOID Context, PVOID DriverObject, PUNICODE_STRING RegistryPath)
typedef
NTSTATUS
(*PFN_WUDF_DRIVER_ENTRY_UM)(
    _In_ PVOID LoaderInterface,
    _In_ PVOID Context,
    _In_ PVOID DriverObject,
    _In_ PUNICODE_STRING RegistryPath
    );

#endif